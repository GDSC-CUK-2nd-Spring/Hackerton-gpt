plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-function-adapter-aws', version: '4.1.2'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-function-web', version: '4.0.0'
    implementation 'org.springframework.cloud:spring-cloud-starter-function-web'
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.2'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'
    implementation 'com.amazonaws.serverless:aws-serverless-java-container-springboot3:2.0.1'
    implementation 'org.springframework.cloud:spring-cloud-function-context:4.0.1'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    //의존성 추가
    runtimeOnly 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'org.springframework.retry:spring-retry'
}

tasks.named('test') {
    useJUnitPlatform()
}

task buildZip(type: Zip) {
    into('lib') {
        from(jar)
        from(configurations.runtimeClasspath)
    }
}

jar {
    enabled = true
    archiveClassifier = '' // use empty string

    from { // 의존성 포함
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
//    manifest {
//        attributes(
//                'Main-Class': 'com.example.chatgpt1.ChatGpt1Application'
//        )
//    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE  // 중복처리
}